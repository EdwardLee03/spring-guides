
# ======= Dubbo =======
# 配置参考手册 - http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-配置参考手册
## 应用信息配置：ApplicationConfig
### 当前应用名称，用于注册中心计算应用间依赖关系（必填）
dubbo.application.name=spring-boot-rpc-soa-dubbo-provider
### 当前应用的版本
dubbo.application.version=0.1.0
### 应用负责人，用于服务治理，请填写负责人公司邮箱前缀
dubbo.application.owner=dannong
### 组织名称(BU或部门)，用于注册中心区分服务来源
dubbo.application.organization=credit-card
### 用于服务分层对应的架构
dubbo.application.architecture=open-api
### 应用环境，如：develop/test/product
dubbo.application.environment=develop
### Java字节码编译器，用于动态类的生成，可选：jdk或javassist
dubbo.application.compiler=javassist
### 日志输出方式，可选：slf4j,jcl,log4j,jdk
dubbo.application.logger=slf4j
## 注册中心配置：RegistryConfig
## 注册中心参考手册 - http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-注册中心参考手册
## Zookeeper注册中心
### 注册中心引用BeanId
#dubbo.registry.id=creditCardRegistry
### 注册中心服务器地址，如果地址没有端口缺省为9090，同一集群内的多个地址用逗号分隔（必填）
dubbo.registry.address=127.0.0.1:2181
#dubbo.registry.address=zookeeper://127.0.0.1:2181
### 注册中心地址协议，支持dubbo, http, local三种协议（dubbo）
dubbo.registry.protocol=zookeeper
### 注册中心缺省端口，当address没有带端口时使用此端口做为缺省值（9090）
#dubbo.registry.port=9090
### 设置Zookeeper的根节点，不设置将使用无根树
dubbo.registry.group=credit-card
### Zookeeper客户端
dubbo.registry.client=zkclient
### 网络传输方式，可选mina,netty
dubbo.registry.transport=netty
### 注册中心请求超时时间(毫秒)
dubbo.registry.timeout=5000
### 注册中心会话超时时间(毫秒)，用于检测提供者非正常断线后的脏数据，比如用心跳检测的实现，此时间就是心跳间隔
dubbo.registry.session=60000
### 使用文件缓存注册中心地址列表及服务提供者列表，应用重启时将基于此文件恢复
dubbo.registry.file=${user.home}/credit/runtime/dubbo-registry.dump
### 停止时等待通知完成时间(毫秒)
dubbo.registry.wait=0
### 注册中心不存在时，是否报错
dubbo.registry.check=true
### 是否向此注册中心注册服务，如果设为false，将只订阅，不注册
dubbo.registry.register=true
### 是否向此注册中心订阅服务，如果设为false，将只注册，不订阅
dubbo.registry.subscribe=true
### 服务是否动态注册，如果设为false，注册后将显示后disable状态，需人工启用，
### 并且服务提供者停止时，也不会自动取消注册，需人工禁用
dubbo.registry.dynamic=true
## 监控中心配置：MonitorConfig
### 监控中心协议，如果为protocol="registry"，表示从注册中心发现监控中心地址，否则直连监控中心
dubbo.monitor.protocol=dubbo
### 直连监控中心服务器地址，address="10.20.130.230:12080"
dubbo.monitor.address=
## 服务提供者协议配置：ProtocolConfig
### 协议BeanId，可以在<dubbo:service protocol="">中引用此ID，
### 如果ID不填，缺省和name属性值一样，重复则在name后加序号
dubbo.protocol.id=dubbo
### 协议名称（必填）
dubbo.protocol.name=dubbo
### 服务端口（dubbo协议缺省端口为20880，rmi协议缺省端口为1099，http和hessian协议缺省端口为80）
dubbo.protocol.port=20880
### 服务主机名，为空则自动查找本机IP（建议不要配置，让Dubbo自动获取本机IP）
dubbo.protocol.host=
### 线程池类型，可选：fixed/cached
dubbo.protocol.threadpool=fixed
### 线程池中持有的线程数量
##dubbo.protocol.corethreads=0
### 服务线程池大小(固定大小)
dubbo.protocol.threads=100
### 当线程数大于核心线程数时，线程最大空闲时间（空闲一分钟自动删除，需要时重建）
##dubbo.protocol.alive=60000
### io线程池大小(固定大小)
#dubbo.protocol.iothreads=cpu个数+1
### 服务提供方最大可接受连接数（过载保护）
dubbo.protocol.accepts=0
### 请求及响应数据包大小限制，单位：字节(=8M)
#dubbo.protocol.payload=88388608
### 协议编码方式
#dubbo.protocol.codec=dubbo
### 协议序列化方式（dubbo协议缺省为hessian2，rmi协议缺省为java，http协议缺省为json）
#dubbo.protocol.serialization=hessian2
### 设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件
dubbo.protocol.accesslog=/log/dubbo_access_log
### 提供者上下文路径，为服务path的前缀
dubbo.protocol.path=
#dubbo.protocol.transporter=netty
#dubbo.protocol.server=netty
#dubbo.protocol.client=netty
### 线程池队列大小，当线程池满时，排队等待执行的队列大小
### 建议不要设置，当线程池满时应立即失败，重试其它服务提供的机器，而不是排队，除非有特殊需求
#dubbo.protocol.queues=0
#dubbo.protocol.charset=UTF-8
#dubbo.protocol.buffer=8192
#dubbo.protocol.heartbeat=0
#dubbo.protocol.telnet=
#dubbo.protocol.register=true
#dubbo.protocol.contextpath=
## 服务提供者缺省值配置：ProviderConfig
### 协议BeanId，可以在<dubbo:service proivder="">中引用此ID
dubbo.provider.id=dubbo
### 协议名称
#dubbo.provider.protocol=dubbo
### 服务版本，建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级（0.0.0）
dubbo.provider.version=0.1
### 服务分组，当一个接口有多个实现，可以用分组区分
dubbo.provider.group=develop
### 线程池类型，可选：fixed/cached
dubbo.provider.threadpool=fixed
### 线程池中持有的线程数量
##dubbo.provider.corethreads=10
### 服务线程池大小(固定大小)
dubbo.provider.threads=100
### 当线程数大于核心线程数时，线程最大空闲时间（空闲一分钟自动删除，需要时重建）
##dubbo.provider.alive=300000
### 线程池队列大小，当线程池满时，排队等待执行的队列大小
### 建议不要设置，当线程池满时应立即失败，重试其它服务提供机器，而不是排队，除非有特殊需求
#dubbo.provider.queues=0
### 延迟注册服务时间(毫秒)，设为-1时，表示延迟到Spring容器初始化完成时暴露服务
dubbo.provider.delay=-1
### 远程服务调用超时时间(毫秒)（1000）
dubbo.provider.timeout=1000
### 远程服务调用重试次数，不包括第一次调用，不需要重试请设为0（2）
dubbo.provider.retries=0
### 对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协议表示建立的长连接个数（0）
#dubbo.provider.connections=0
### 负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮循，最少活跃调用（random）
dubbo.provider.loadbalance=leastactive
#dubbo.provider.async=false
### 服务是否动态注册，如果设为false，注册后将显示后disable状态，需人工启用，
### 并且服务提供者停止时，也不会自动取消册，需人工禁用
#dubbo.provider.dynamic=true
### 设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件
dubbo.provider.accesslog=true
### 服务权重
#dubbo.provider.weight=
### 服务提供者每服务每方法最大可并行执行请求数
#dubbo.provider.executes=0
### 每服务消费者每服务每方法最大并发调用数
#dubbo.provider.actives=0
### 生成动态代理方式，可选：jdk/javassist
#dubbo.provider.proxy=javassist
### 集群方式，可选：failover/failfast/failsafe/failback/forking
#dubbo.provider.cluster=failover
### 服务提供者所在的分层
dubbo.provider.layer=service
## ServiceConfig
### 服务接口名（必填）
#dubbo.service.interface=服务接口名
### 服务对象实现引用（必填）
#dubbo.service.ref=服务对象实现引用
### 服务版本，建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级
#dubbo.service.version=0.0.0
### 服务分组，当一个接口有多个实现，可以用分组区分
#dubbo.service.group=
### 服务路径 (注意：1.0不支持自定义路径，总是使用接口名，如果有1.0调2.0，配置服务路径可能不兼容)
### 缺省为接口名
#dubbo.service.path=
### 延迟注册服务时间(毫秒) ，设为-1时，表示延迟到Spring容器初始化完成时暴露服务
#dubbo.service.delay=-1
#dubbo.service.timeout=1000
#dubbo.service.retries=2
#dubbo.service.connections=100
#dubbo.service.async=false
#dubbo.service.weight=
#dubbo.service.register=true


# ----------------------------------------
# ACTUATOR PROPERTIES
# ----------------------------------------

# MANAGEMENT HTTP SERVER (ManagementServerProperties)
# Enable security.
management.security.enabled=false

